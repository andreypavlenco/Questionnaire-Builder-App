
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


  model Quiz {
  id             String    @id @default(uuid())
  title          String
  description    String?
  passCount      Int?       @default(0) 
  questionCount  Int?       @default(0) 
  questions      Question[] 
  quizSessions   QuizSession[]  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Question {
  id         String    @id @default(uuid())
  text       String
  type       QuestionType
  order      Int?
  quizId     String
  quiz       Quiz    @relation(fields: [quizId], references: [id], onDelete: Cascade) 
  options    AnswerOption[] 
  userAnswers UserAnswer[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

enum QuestionType {
  TEXT
  CHOICE
}

model AnswerOption {
  id         String    @id @default(uuid())
  text       String
  questionId String
  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade) 
  userAnswers UserAnswer[]
}

model QuizSession {
  id         String    @id @default(uuid())
  quizId     String
  quiz       Quiz    @relation(fields: [quizId], references: [id], onDelete: Cascade) 
  completed  Boolean   @default(false)
  timeTaken  Int?     
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userAnswers UserAnswer[] 
}

model UserAnswer {
  id             String    @id @default(uuid())
  quizSessionId  String
  quizSession    QuizSession @relation(fields: [quizSessionId], references: [id], onDelete: Cascade)
  questionId     String
  question       Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answerText     String? 
  selectedOptions AnswerOption[] 
  createdAt      DateTime  @default(now())
}

