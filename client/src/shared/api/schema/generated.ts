/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/questionnaires": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all questionnaires */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["QuestionnaireList"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new questionnaire */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Questionnaire"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Questionnaire"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/questionnaires/{questionnaireId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get questionnaire by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    questionnaireId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Found */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Questionnaire"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete questionnaire */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    questionnaireId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Questionnaire: {
            id: string;
            title: string;
            description: string;
            questions: components["schemas"]["Question"][];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            completionsCount?: number;
        };
        Question: {
            id: string;
            /** @enum {string} */
            type: "text" | "single-choice" | "multiple-choice" | "image";
            text: string;
            options?: string[] | null;
        };
        Completion: {
            id: string;
            questionnaireId: string;
            answers: components["schemas"]["Answer"][];
            /** Format: date-time */
            startedAt: string;
            /** Format: date-time */
            completedAt: string;
        };
        Answer: {
            questionId: string;
            value: string;
        };
        QuestionnaireList: {
            list: components["schemas"]["Questionnaire"][];
            total: number;
            totalPages: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
